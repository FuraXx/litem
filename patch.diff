diff --git a/code/client/launcher/Bootstrap.cpp b/code/client/launcher/Bootstrap.cpp
index 70e1e752..29b021ef 100644
--- a/code/client/launcher/Bootstrap.cpp
+++ b/code/client/launcher/Bootstrap.cpp
@@ -73,55 +73,58 @@ bool VerifyViability();
 
 bool Bootstrap_DoBootstrap()
 {
-	// first check the bootstrapper version
-	char bootstrapVersion[256];
+	if (GetFileAttributes(MakeRelativeCitPath(L"LiteM.ini").c_str()) == INVALID_FILE_ATTRIBUTES)
+	{
+		// first check the bootstrapper version
+		char bootstrapVersion[256];
 
-	int result = DL_RequestURL(va(CONTENT_URL "/%s/bootstrap/version.txt?time=%lld", GetUpdateChannel(), _time64(NULL)), bootstrapVersion, sizeof(bootstrapVersion));
+		int result = DL_RequestURL(va(CONTENT_URL "/%s/bootstrap/version.txt?time=%lld", GetUpdateChannel(), _time64(NULL)), bootstrapVersion, sizeof(bootstrapVersion));
 
-	if (result != 0)
-	{
-		if (GetFileAttributes(MakeRelativeCitPath(L"CoreRT.dll").c_str()) == INVALID_FILE_ATTRIBUTES)
+		if (result != 0)
 		{
-			MessageBox(NULL, va(L"An error (%i, %s) occurred while checking the bootstrapper version. Check if " CONTENT_URL_WIDE L" is available in your web browser.", result, ToWide(DL_RequestURLError())), L"O\x448\x438\x431\x43A\x430", MB_OK | MB_ICONSTOP);
-			return false;
+			if (GetFileAttributes(MakeRelativeCitPath(L"CoreRT.dll").c_str()) == INVALID_FILE_ATTRIBUTES)
+			{
+				MessageBox(NULL, va(L"An error (%i, %s) occurred while checking the bootstrapper version. Check if " CONTENT_URL_WIDE L" is available in your web browser.", result, ToWide(DL_RequestURLError())), L"O\x448\x438\x431\x43A\x430", MB_OK | MB_ICONSTOP);
+				return false;
+			}
+
+			return true;
 		}
 
-		return true;
-	}
+		//int version = atoi(bootstrapVersion);
+		int version;
+		int exeSize;
+		sscanf(bootstrapVersion, "%i %i", &version, &exeSize);
 
-	//int version = atoi(bootstrapVersion);
-	int version;
-	int exeSize;
-	sscanf(bootstrapVersion, "%i %i", &version, &exeSize);
+		if (version != BASE_EXE_VERSION && GetFileAttributes(MakeRelativeCitPath(L"nobootstrap.txt").c_str()) == INVALID_FILE_ATTRIBUTES)
+		{
+			return Bootstrap_UpdateEXE(exeSize, version);
+		}
 
-	if (version != BASE_EXE_VERSION && GetFileAttributes(MakeRelativeCitPath(L"nobootstrap.txt").c_str()) == INVALID_FILE_ATTRIBUTES)
-	{
-		return Bootstrap_UpdateEXE(exeSize, version);
-	}
+		// after self-updating, attempt to run install mode if needed
+		if (Install_RunInstallMode())
+		{
+			return false;
+		}
 
-	// after self-updating, attempt to run install mode if needed
-	if (Install_RunInstallMode())
-	{
-		return false;
-	}
+		if (GetFileAttributes(MakeRelativeCitPath(L"CoreRT.dll").c_str()) == INVALID_FILE_ATTRIBUTES)
+		{
+			if (GetFileAttributes(MakeRelativeCitPath(L"GTA5.exe").c_str()) != INVALID_FILE_ATTRIBUTES || GetFileAttributes(MakeRelativeCitPath(L"..\\GTA5.exe").c_str()) != INVALID_FILE_ATTRIBUTES)
+			{
+				MessageBox(NULL, L"Please do not place FiveM.exe in your game folder. Make a new empty folder (for example, on your desktop) instead.", L"O\x448\x438\x431\x43A\x430", MB_OK | MB_ICONSTOP);
+				return false;
+			}
+		}
 
-	if (GetFileAttributes(MakeRelativeCitPath(L"CoreRT.dll").c_str()) == INVALID_FILE_ATTRIBUTES)
-	{
-		if (GetFileAttributes(MakeRelativeCitPath(L"GTA5.exe").c_str()) != INVALID_FILE_ATTRIBUTES || GetFileAttributes(MakeRelativeCitPath(L"..\\GTA5.exe").c_str()) != INVALID_FILE_ATTRIBUTES)
+		static HostSharedData<CfxState> initState("CfxInitState");
+		initState->ranPastInstaller = true;
+
+		if (!VerifyViability())
 		{
-			MessageBox(NULL, L"Please do not place FiveM.exe in your game folder. Make a new empty folder (for example, on your desktop) instead.", L"O\x448\x438\x431\x43A\x430", MB_OK | MB_ICONSTOP);
 			return false;
 		}
 	}
 
-	static HostSharedData<CfxState> initState("CfxInitState");
-	initState->ranPastInstaller = true;
-
-    if (!VerifyViability())
-    {
-        return false;
-    }
-
 #ifdef GTA_NY
 	return Updater_RunUpdate(1, "citiv");
 #else
diff --git a/code/client/launcher/StdInc.h b/code/client/launcher/StdInc.h
index b2932bd4..a45eef91 100644
--- a/code/client/launcher/StdInc.h
+++ b/code/client/launcher/StdInc.h
@@ -36,6 +36,7 @@ HWND UI_GetWindowHandle();
 
 // updater functions
 bool Updater_RunUpdate(int numCaches, ...);
+bool Updater_RunLiteMUpdate();
 const char* GetUpdateChannel();
 
 #include <array>
diff --git a/code/client/launcher/Updater.cpp b/code/client/launcher/Updater.cpp
index d1906794..946088c2 100644
--- a/code/client/launcher/Updater.cpp
+++ b/code/client/launcher/Updater.cpp
@@ -19,6 +19,20 @@
 
 #include "sha1.h"
 
+/* LiteM stuff */
+#include <filesystem>
+#include <direct.h>
+
+#include <rapidjson/document.h>
+
+#include <mz.h>
+#include <mz_os.h>
+#include <mz_strm.h>
+#include <mz_strm_buf.h>
+#include <mz_strm_split.h>
+#include <mz_zip.h>
+#include <mz_zip_rw.h>
+
 struct cache_t
 {
 	std::string name;
@@ -154,6 +168,11 @@ private:
 
 bool Updater_RunUpdate(int numCaches, ...)
 {
+	if (GetFileAttributes(MakeRelativeCitPath(L"LiteM.ini").c_str()) != INVALID_FILE_ATTRIBUTES)
+	{
+		return Updater_RunLiteMUpdate();
+	}
+
 	static char cachesFile[800000];
 
 	int result = DL_RequestURL(va(CONTENT_URL "/%s/content/caches.xml?timeStamp=%lld", GetUpdateChannel(), _time64(NULL)), cachesFile, sizeof(cachesFile));
@@ -487,3 +506,223 @@ const char* GetUpdateChannel()
 
 	return updateChannel.c_str();
 }
+
+/* LiteM stuff */
+
+void RemoveFilesFromDirectory(const char* path, const char* ext = "*")
+{
+	using recursive_directory_iterator = std::filesystem::recursive_directory_iterator;
+
+	for (const auto& entry : recursive_directory_iterator(path))
+	{
+		auto path = entry.path().string();
+
+		if (!entry.is_directory() && (ext == "*" || (path.substr(path.find_last_of(".") + 1) == ext)))
+		{
+			DeleteFileA(path.c_str());
+		}
+	}
+}
+
+int32_t ExtractUpdateEntry(const char* path, const char* pattern, const char* destination)
+{
+	void* reader = NULL;
+	int32_t err = MZ_OK;
+	int32_t err_close = MZ_OK;
+
+	mz_zip_reader_create(&reader);
+	mz_zip_reader_set_pattern(reader, pattern, 1);
+
+	err = mz_zip_reader_open_file(reader, path);
+
+	if (err == MZ_OK)
+	{
+		err = mz_zip_reader_save_all(reader, destination);
+	}
+
+	err_close = mz_zip_reader_close(reader);
+
+	if (err_close != MZ_OK)
+	{
+		err = err_close;
+	}
+
+	mz_zip_reader_delete(&reader);
+
+	return err;
+}
+
+int32_t ExtractUpdate(const char* path)
+{
+	std::wstring fpath = MakeRelativeCitPath(L"LiteM.ini");
+	std::wstring citPathWide = GetAbsoluteCitPath();
+	std::string citPath = std::string(citPathWide.begin(), citPathWide.end());
+	std::wstring cachePathWide = MakeRelativeCitPath(L"cache");
+	std::string cachePath = std::string(cachePathWide.begin(), cachePathWide.end());
+	std::string litemDir = cachePath + "\\litem";
+	std::string updateDir = cachePath + "\\litem\\update";
+
+	mz_zip_file* file_info = NULL;
+	uint32_t ratio = 0;
+	int16_t level = 0;
+	int32_t err = MZ_OK;
+	struct tm tmu_date;
+	const char* string_method = NULL;
+	char crypt = ' ';
+	void* reader = NULL;
+
+
+	mz_zip_reader_create(&reader);
+
+	err = mz_zip_reader_open_file(reader, path);
+
+	if (err != MZ_OK)
+	{
+		mz_zip_reader_delete(&reader);
+		return err;
+	}
+
+	err = mz_zip_reader_goto_first_entry(reader);
+
+	if (err != MZ_OK && err != MZ_END_OF_LIST)
+	{
+		mz_zip_reader_delete(&reader);
+		return err;
+	}
+
+	do
+	{
+		err = mz_zip_reader_entry_get_info(reader, &file_info);
+
+		if (err != MZ_OK)
+		{
+			break;
+		}
+
+		ratio = 0;
+
+		if (file_info->uncompressed_size > 0)
+			ratio = (uint32_t)((file_info->compressed_size * 100) / file_info->uncompressed_size);
+
+		if (file_info->filename != "LiteM.ini")
+		{
+			mz_zip_time_t_to_tm(file_info->modified_date, &tmu_date);
+
+			ExtractUpdateEntry(path, file_info->filename, updateDir.c_str());
+
+			MoveFileA((citPath + file_info->filename).c_str(), (citPath + file_info->filename + ".old").c_str());
+			MoveFileA((updateDir + "\\" + file_info->filename).c_str(), (citPath + file_info->filename).c_str());
+		}
+
+		err = mz_zip_reader_goto_next_entry(reader);
+
+		if (err != MZ_OK && err != MZ_END_OF_LIST)
+		{
+			break;
+		}
+
+	} while (err == MZ_OK);
+
+	mz_zip_reader_delete(&reader);
+
+	if (err == MZ_END_OF_LIST)
+		return MZ_OK;
+
+	return err;
+}
+
+bool Updater_RunLiteMUpdate()
+{
+	std::wstring fpath = MakeRelativeCitPath(L"LiteM.ini");
+	std::wstring citPathWide = GetAbsoluteCitPath();
+	std::string citPath = std::string(citPathWide.begin(), citPathWide.end());
+	std::wstring cachePathWide = MakeRelativeCitPath(L"cache");
+	std::string cachePath = std::string(cachePathWide.begin(), cachePathWide.end());
+	std::string litemDir = cachePath + "\\litem";
+	std::string updateDir = cachePath + "\\litem\\update";
+	std::string zip = litemDir + "\\update.zip";
+
+	mkdir(litemDir.c_str());
+	mkdir(updateDir.c_str());
+
+	RemoveFilesFromDirectory(updateDir.c_str(), "*");
+	RemoveFilesFromDirectory(citPath.c_str(), "old");
+
+	wchar_t repo[128];
+
+	GetPrivateProfileStringW(L"update", L"repo", L"esx-org/litem", repo, 128, fpath.c_str());
+	int clientRelease = (int) GetPrivateProfileIntW(L"update", L"release", -1, fpath.c_str());
+
+	char* rawJSON = new char[65535];
+
+	int result = DL_RequestURL(va("https://api.github.com/repos/%s/releases/latest", std::string(repo, repo + wcslen(repo))), rawJSON, 65535);
+
+	rapidjson::Document doc;
+
+	doc.Parse(rawJSON, 65535);
+
+	delete[] rawJSON;
+
+	int  release = doc["id"].GetInt();
+	auto assets  = doc["assets"].GetArray();
+
+	for (rapidjson::SizeType i = 0; i < assets.Size(); i++)
+	{
+		auto name = assets[i]["name"].GetString();
+		auto url  = assets[i]["browser_download_url"].GetString();
+		int  size = assets[i]["size"].GetInt();
+
+		std::wstring nameWide(name, name + strlen(name));
+		std::wstring suffix(L"-client.zip");
+
+		if (nameWide == (PRODUCT_NAME + suffix))
+		{
+			if (release != clientRelease)
+			{
+				int res = MessageBoxW(NULL, L"An update is available, would you like to download it ?", L"LiteM updater", MB_YESNO);
+
+				switch (res)
+				{
+				case IDYES:
+				{
+					UI_DoCreation();
+					CL_QueueDownload(url, zip.c_str(), size, false);
+					UI_UpdateText(0, L"Updating " PRODUCT_NAME L"...");
+
+					bool retval = DL_RunLoop();
+
+					if (retval)
+					{
+						if (ExtractUpdate(zip.c_str()) != MZ_OK)
+						{
+							MessageBoxW(NULL, L"Update failed", L"LiteM updater", MB_OK);
+							UI_DoDestruction();
+							return true;
+						}
+						else
+						{
+							WritePrivateProfileStringW(L"update", L"release", std::to_wstring(release).c_str(), fpath.c_str());
+							UI_DoDestruction();
+							MessageBoxW(NULL, L"Update done, please restart the game", L"LiteM updater", MB_OK);
+							return false;
+						}
+					}
+					else
+					{
+						MessageBoxW(NULL, L"Update failed", L"LiteM updater", MB_OK);
+						UI_DoDestruction();
+						return true;
+					}
+
+					break;
+				}
+
+				case IDNO:
+					return true;
+				}
+			}
+		}
+	}
+
+	return true;
+}
diff --git a/code/components/citizen-server-impl/src/ServerResources.cpp b/code/components/citizen-server-impl/src/ServerResources.cpp
index 733ff36e..c436e3a6 100644
--- a/code/components/citizen-server-impl/src/ServerResources.cpp
+++ b/code/components/citizen-server-impl/src/ServerResources.cpp
@@ -536,8 +536,9 @@ static InitFunction initFunction([]()
 		instance->OnInitialConfiguration.Connect([]()
 		{
 			configured = true;
+			trace("\n\n^1              dMP     dMP dMMMMMMP dMMMMMP dMMMMMMMMb \n^1             dMP     amr    dMP   dMP     dMP dMP dMP \n^1            dMP     dMP    dMP   dMMMP   dMP dMP dMP  \n^1           dMP     dMP    dMP   dMP     dMP dMP dMP   \n^1          dMMMMMP dMP    dMP   dMMMMMP dMP dMP dMP \n                                     ^7\n\n");
 		});
-
+		
 		static auto refreshCommandRef = instance->AddCommand("refresh", [=]()
 		{
 			ScanResources(instance);
diff --git a/code/components/gta-streaming-five/src/LoadStreamingFile.cpp b/code/components/gta-streaming-five/src/LoadStreamingFile.cpp
index df996bb2..57db47f6 100644
--- a/code/components/gta-streaming-five/src/LoadStreamingFile.cpp
+++ b/code/components/gta-streaming-five/src/LoadStreamingFile.cpp
@@ -578,7 +578,7 @@ static std::string GetBaseName(const std::string& name)
 	if (Instance<ICoreGameInit>::Get()->GetData("policy", &policyVal))
 	{
 #ifndef _DEBUG
-		if (policyVal.find("[subdir_file_mapping]") != std::string::npos)
+		if ((GetFileAttributes(MakeRelativeCitPath(L"LiteM.ini").c_str()) != INVALID_FILE_ATTRIBUTES) || policyVal.find("[subdir_file_mapping]") != std::string::npos)
 #endif
 		{
 			std::replace(retval.begin(), retval.end(), '^', '/');
diff --git a/code/components/net/src/NetLibrary.cpp b/code/components/net/src/NetLibrary.cpp
index cf240115..48f25e65 100644
--- a/code/components/net/src/NetLibrary.cpp
+++ b/code/components/net/src/NetLibrary.cpp
@@ -1256,7 +1256,11 @@ concurrency::task<void> NetLibrary::ConnectToServer(const std::string& rootUrl)
 							steam->SetConnectValue(fmt::sprintf("+connect %s:%d", m_currentServer.GetAddress(), m_currentServer.GetPort()));
 						}
 
-						if (Instance<ICoreGameInit>::Get()->OneSyncEnabled && !onesyncType.empty())
+						if (GetFileAttributes(MakeRelativeCitPath(L"LiteM.ini").c_str()) != INVALID_FILE_ATTRIBUTES)
+						{
+							m_connectionState = CS_INITRECEIVED;
+						}
+						else if (Instance<ICoreGameInit>::Get()->OneSyncEnabled && !onesyncType.empty())
 						{
 							auto oneSyncFailure = [this, onesyncType]()
 							{
diff --git a/data/client/components.json b/data/client/components.json
index b377d9fb..c34d8367 100644
--- a/data/client/components.json
+++ b/data/client/components.json
@@ -52,11 +52,9 @@
 	"devtools:five",
 	"tool:vehrec",
 	"extra-natives:five",
-	"discord",
 	"voip:mumble",
 	"scrbind:base",
 	"n19ui",
 	"citizen:mod-loader:five",
-	"adhesive",
 	"citizen:game:ipc"
 ]
diff --git a/data/client_rdr/components.json b/data/client_rdr/components.json
index b01c5dc8..4222b764 100644
--- a/data/client_rdr/components.json
+++ b/data/client_rdr/components.json
@@ -43,6 +43,5 @@
 	"extra-natives:rdr3",
 	"citizen:playernames:rdr3",
 	"rage:formats:x",
-	"devcon",
-	"adhesive"
+	"devcon"
 ]
\ No newline at end of file
diff --git a/data/server/components.json b/data/server/components.json
index e98ead9a..d46da53e 100644
--- a/data/server/components.json
+++ b/data/server/components.json
@@ -15,7 +15,6 @@
   "vfs:core",
   "vfs:impl:server",
   "scripting:server",
-  "svadhesive",
   "citizen:scripting:mono",
   "citizen:scripting:v8",
   "voip-server:mumble",
diff --git a/data/server_windows/components.json b/data/server_windows/components.json
index e98ac9a3..15ea679a 100644
--- a/data/server_windows/components.json
+++ b/data/server_windows/components.json
@@ -15,7 +15,6 @@
   "vfs:core",
   "vfs:impl:server",
   "scripting:server",
-  "svadhesive",
   "citizen:scripting:mono",
   "citizen:scripting:v8",
   "voip-server:mumble",
